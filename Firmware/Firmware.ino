#define ENABLE_GxEPD2_GFX 1
#include <GxEPD2_BW.h>

//fonts
#include "Fonts/Picopixel.h"
#include "Fonts/FreeMonoBold9pt7b.h"
#include "Fonts/FreeMonoBold18pt7b.h"

//bitmaps
static const unsigned char PROGMEM base[] = {0xff,0xe7,0xff,0x1f,0xfc,0x7f,0xf1,0xff,0xc7,0xff,0x3f,0xf8,0xff,0xe3,0xff,0x8f,0xfe,0x7f,0xf1,0xff,0xc7,0xff,0x1f,0xfc,0xff,0xe3,0xff,0x8f,0xfe,0x3f,0xf8,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0x80,0x24,0x01,0x10,0x04,0x40,0x11,0x00,0x44,0x01,0x20,0x08,0x80,0x22,0x00,0x88,0x02,0x40,0x11,0x00,0x44,0x01,0x10,0x04,0x80,0x22,0x00,0x88,0x02,0x20,0x08,0xff,0xe7,0xff,0x1f,0xfc,0x7f,0xf1,0xff,0xc7,0xff,0x3f,0xf8,0xff,0xe3,0xff,0x8f,0xfe,0x7f,0xf1,0xff,0xc7,0xff,0x1f,0xfc,0xff,0xe3,0xff,0x8f,0xfe,0x3f,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x84,0x84,0x67,0x10,0x88,0x42,0x71,0xc9,0x0e,0xce,0x39,0x10,0xe4,0xe1,0x12,0x09,0x1c,0x22,0x21,0xc9,0xc7,0x62,0x1c,0x88,0x22,0x41,0x11,0x04,0x44,0x12,0x10,0xad,0x45,0x14,0x15,0x14,0x55,0x41,0x1a,0x88,0x28,0x22,0x28,0x8a,0x82,0x35,0x11,0x50,0x45,0x50,0x55,0x01,0x15,0x05,0x14,0x56,0xa2,0xa2,0x8a,0xaa,0x2a,0xa8,0xe5,0x47,0x26,0x1d,0x94,0x72,0x61,0x8a,0x8c,0x4c,0x33,0x28,0xc4,0xc3,0x15,0x19,0xd8,0x62,0x50,0x95,0x82,0x25,0x09,0x94,0x22,0xa1,0x32,0x86,0xaa,0x1b,0xa8,0x25,0x41,0x11,0x05,0x54,0x15,0x10,0x4a,0x82,0x22,0x0a,0xa8,0x2a,0x22,0x95,0x14,0x44,0x55,0x51,0x14,0x44,0x15,0x11,0x54,0x52,0xa2,0xaa,0x82,0xaa,0x08,0xa8,0x24,0x81,0x66,0x04,0x88,0x12,0x61,0x89,0x0c,0xcc,0x31,0x10,0xc4,0xc1,0x12,0x08,0x58,0x22,0x21,0x09,0x84,0x62,0x10,0x88,0x22,0x41,0x11,0x04,0x44,0x10,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x42,0x00,0x00,0x04,0x40,0x00,0x00,0x88,0x00,0x00,0x08,0x80,0x00,0x01,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x40,0x00,0x00,0x00,0x00,0x00,0x08,0x80,0x42,0x00,0x00,0x04,0x40,0x00,0x00,0x88,0x00,0x00,0x08,0x80,0x00,0x01,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x40,0x00,0x00,0x00,0x00,0x00,0x08,0xff,0xc3,0xff,0xff,0xfc,0x7f,0xff,0xff,0x8f,0xff,0xff,0xf8,0xff,0xff,0xff,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x7f,0xff,0xff,0xff,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x88,0x80,0x78,0xc0,0x00,0x03,0xc0,0x00,0x00,0x89,0x80,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x22,0x73,0xc0,0x00,0x00,0x88,0x00,0x44,0x40,0x00,0x04,0x40,0x00,0x00,0x88,0x80,0x00,0x08,0x80,0x00,0x00,0x00,0x00,0x08,0x80,0x08,0x00,0x00,0x00,0x00,0x00,0x22,0x22,0x20,0x00,0x00,0x89,0x80,0x44,0x44,0x40,0x04,0x16,0x58,0x00,0x50,0x88,0x80,0x08,0xac,0x70,0x00,0x00,0x00,0x08,0x9c,0x68,0x00,0x00,0x00,0x00,0x00,0x32,0x22,0x20,0x00,0x00,0x88,0x80,0x78,0x44,0x40,0x04,0x19,0x64,0x00,0x20,0x88,0x80,0x08,0xb2,0x98,0x00,0x00,0x00,0x0f,0x22,0x98,0x00,0x00,0x00,0x00,0x00,0x2a,0x23,0xc0,0x00,0x00,0x88,0x80,0x44,0x44,0x40,0x04,0xd0,0x44,0x00,0x20,0x8a,0x80,0x08,0xa0,0x98,0x00,0x00,0x00,0x0a,0x3e,0x88,0x00,0x00,0x00,0x00,0x00,0x26,0x22,0x80,0x00,0x00,0x50,0x80,0x44,0x44,0xc0,0x04,0x50,0x44,0x00,0x20,0x8a,0x80,0x08,0xa0,0x68,0x00,0x00,0x00,0x09,0x20,0x98,0x00,0x00,0x00,0x00,0x00,0x22,0x22,0x40,0x00,0x00,0x21,0xc0,0x78,0xe3,0x40,0x03,0xd0,0x44,0x00,0x21,0xc5,0x00,0x07,0x20,0x08,0x00,0x00,0x00,0x08,0x9c,0x68,0x00,0x00,0x00,0x00,0x00,0x22,0x72,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

//GxEPD2 Setup for Waveshare 2.13" V4 BW E-Paper Display
#define GxEPD2_DISPLAY_CLASS GxEPD2_BW
#define MAX_DISPLAY_BUFFER_SIZE 131072ul
#define MAX_HEIGHT(EPD) (EPD::HEIGHT <= MAX_DISPLAY_BUFFER_SIZE / (EPD::WIDTH / 8) ? EPD::HEIGHT : MAX_DISPLAY_BUFFER_SIZE / (EPD::WIDTH / 8))
#define GxEPD2_DRIVER_CLASS GxEPD2_213_GDEY0213B74 // GDEY0213B74 122x250, SSD1680, (FPC-A002 20.04.08)
GxEPD2_DISPLAY_CLASS<GxEPD2_DRIVER_CLASS, MAX_HEIGHT(GxEPD2_DRIVER_CLASS)> display(GxEPD2_DRIVER_CLASS(/*CS=*/ 9, /*DC=*/ 8, /*RST=*/ 12, /*BUSY=*/ 13)); // Waveshare Pico-ePaper-2.9
SPIClassRP2040 SPIn(spi1, -1, 13, 10, 11);

uint8_t ledmode = 1; //default is builtin LED mode, 0 is no LEDs, 1 is internal LEDs, 2 is external LEDs, 3 is all LEDs
uint8_t sensemode = 0; //default is single fire mode, 1 is continuous, 2,3,4, etc takes that many readings in a burst and averages

//Rotary Encoder Library
#include <RotaryEncoder.h>
#define PIN_IN1 5
#define PIN_IN2 3
RotaryEncoder *encoder = nullptr;
int8_t pos = 0;
int8_t newpos = 0;

void checkPosition() //called upon whenever pin changes on encoder
{
  encoder->tick(); //call tick() to check the state.
  newpos = encoder->getPosition();
  if (pos != newpos) {
    //bigText("ROTATE");
      if ((int)(encoder->getDirection()) > 0 && sensemode < 10){
        sensemode++;
      }
      else if((int)(encoder->getDirection()) < 0 && sensemode > 0){
        sensemode--;
      }
  }
}

//Spectrometer Module Library
#include "SparkFun_AS7265X.h" 
AS7265X sensor;

#include <Wire.h> //For I2C

// Wavelength Channel names
const char* wavelengthNames[] = {
  "410nm (A) - Violet  ", "435nm (B) - Indigo  ", "460nm (C) - Blue    ",
  "485nm (D) - Cyan    ", "510nm (E) - Green   ", "535nm (F) - Lime    ",
  "560nm (G) - Yellow  ", "585nm (H) - Orange  ", "610nm (R) - Orange+ ",
  "645nm (I) - Red     ", "680nm (S) - Deep Red", "705nm (J) - Red+    ",
  "730nm (T) - NIR     ", "760nm (U) - NIR     ", "810nm (V) - NIR     ",
  "860nm (W) - NIR     ", "900nm (K) - NIR     ", "940nm (L) - NIR     "
};

//store the sensor readings in an array
float readings[18];
uint8_t intreadings[18]; //stores integer from 0-68 for displaying on bar chart
uint8_t intreadingsmem[9][18]; //stores up to 9 historical readings

//determine the dominant colour (Sparkfun Code)
String detectColour() {
  int maxIndex = 0;
  float maxVal = readings[0];
  
  // Find the peak wavelength
  for (int i = 1; i < 18; i++) {
    if (readings[i] > maxVal) {
      maxVal = readings[i];
      maxIndex = i;
    }
  }
  
  // Determine dominant colour based on peak wavelength
  if (maxVal == 0) return "No Light";
  else if (maxIndex <= 0) return "Violet";
  else if (maxIndex <= 2) return "Blue";
  else if (maxIndex <= 4) return "Green";
  else if (maxIndex <= 6) return "Yellow";
  else if (maxIndex <= 8) return "Orange";
  else if (maxIndex <= 13) return "Red";
  else return "NIR";
}

//Button Interrupt
volatile bool ledState = LOW;
volatile bool measuring = false;
volatile unsigned long lastInterruptTime = 0;
const unsigned long debounceDelay = 200; //ms

void handleBTNINT() {
  unsigned long interruptTime = millis();
  if (interruptTime - lastInterruptTime > debounceDelay) {
    //toggle LED for debug purposes
    ledState = !ledState;
    digitalWrite(LED_BUILTIN, ledState);
    
    //take measurement or cancel continuous measurement
    if(measuring == false){
      measuring = true;
      multimeasure();
    }
    else{
      measuring = false;
    }

    lastInterruptTime = interruptTime;
  }
}

void setup() {
  //for RNG, disable if not required
  randomSeed(analogRead(A0));

  //button interrupt
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(15, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(15), handleBTNINT, FALLING);

  //display initialisation
  // pinMode(13, INPUT_PULLDOWN); //pull down busy pin
  display.epd2.selectSPI(SPIn, SPISettings(4000000, MSBFIRST, SPI_MODE0));
  display.init(115200, true, 10, false, SPIn, SPISettings(4000000, MSBFIRST, SPI_MODE0));
  //full refresh to begin
  display.clearScreen();

  //encoder initialisation
  encoder = new RotaryEncoder(PIN_IN1, PIN_IN2, RotaryEncoder::LatchMode::FOUR3);
  attachInterrupt(digitalPinToInterrupt(PIN_IN1), checkPosition, CHANGE);
  attachInterrupt(digitalPinToInterrupt(PIN_IN2), checkPosition, CHANGE);
  
  //spectrometer initialisation
  delay(750); //750ms gives E-Paper enough time to initialise
  if (sensor.begin() == false){ //no sensor detected
    bigText("No Sensor Connected");
  }
  else{
    bigText("Valid Sensor Connected");
    sensor.disableIndicator();
  }
  delay(750);
  drawEmpty("Booted");
}

void loop() {

}

//spectral reading, ledmode 0 for no LEDs, 1 for inbuilt LEDs, (2 for external LEDs, 4 for all LEDs)
void measure(){
  if(sensor.isConnected() == false){ //randomly generates bogus data if no sensor connected
    for(uint8_t i = 0; i < 18; i++){ 
      intreadings[i] = random(68);
      readings[i] = intreadings[i];
    }
  }
  else{
    if(ledmode == 0){ //measure with no LEDs
      sensor.takeMeasurements();
    }
    else if(ledmode == 1){ //measure with inbuilt LEDs
      sensor.takeMeasurementsWithBulb();
    }
    else if(ledmode == 2){ //measure with extenal LEDs
      //set GPIO16 high
      sensor.takeMeasurements();
      //set GPIO16 low
    }
    else if(ledmode == 3){ //measure with inbuilt and external LEDs
      //set GPIO16 high
      sensor.takeMeasurementsWithBulb();
      //set GPIO16 low
    }
    else{ //measure with no LEDs if invalid mode
      sensor.takeMeasurements();
    }
    readings[0] = sensor.getCalibratedA();  // 410nm
    readings[1] = sensor.getCalibratedB();  // 435nm
    readings[2] = sensor.getCalibratedC();  // 460nm
    readings[3] = sensor.getCalibratedD();  // 485nm
    readings[4] = sensor.getCalibratedE();  // 510nm
    readings[5] = sensor.getCalibratedF();  // 535nm
    readings[6] = sensor.getCalibratedG();  // 560nm
    readings[7] = sensor.getCalibratedH();  // 585nm
    readings[8] = sensor.getCalibratedR();  // 610nm
    readings[9] = sensor.getCalibratedI();  // 645nm
    readings[10] = sensor.getCalibratedS(); // 680nm
    readings[11] = sensor.getCalibratedJ(); // 705nm
    readings[12] = sensor.getCalibratedT(); // 730nm
    readings[13] = sensor.getCalibratedU(); // 760nm
    readings[14] = sensor.getCalibratedV(); // 810nm
    readings[15] = sensor.getCalibratedW(); // 860nm
    readings[16] = sensor.getCalibratedK(); // 900nm
    readings[17] = sensor.getCalibratedL(); // 940nm
    float maxReading = 0;
    for (int i = 0; i < 18; i++) {
      if (readings[i] > maxReading) maxReading = readings[i];
    }
    for (int i = 0; i < 18; i++) {
      intreadings[i] = readings[i] / maxReading * 69;
    }
  }
}

//should first draw "waiting for reading", then take a reading if sensor connected or generate fake results, then finally draw the data on the screen
void multimeasure(){
  //waiting for reading screen
  drawEmpty("Measuring");

  if(sensemode == 0){ //single fire
    measure();
    measuring = false;
    drawMain(detectColour(), intreadings);
  }
  else if(sensemode == 1){ //continuous fire
    while(measuring){ //continues until button pressed again
      measure();
      drawMain(detectColour(), intreadings);
      delay(500);
    }
  }
  else if(sensemode > 1){ //burst fire
    for(uint8_t i = 0; i < sensemode; i++){ //take number of measurements equal to sensemode from 2-9
      measure();
      //record in mem
    }
    //average
    //show results
    drawMain(detectColour(), intreadings);
    measuring = false;
  }

}

void bigText(String text) {
  display.setRotation(1); //sets landscape rotation
  display.setFullWindow(); //sets full refresh mode
  display.firstPage();     //start paged drawing

  //Variables to store text bounds
  int16_t x1, y1;
  uint16_t w, h;

  do {
    //Set background for the current page
    display.fillScreen(GxEPD_WHITE);
    display.setFont(&FreeMonoBold9pt7b);
    display.setTextColor(GxEPD_BLACK);

    display.getTextBounds(text, 0, 0, &x1, &y1, &w, &h);
    display.setCursor(((display.width() - w) / 2 - x1), ((display.height() - h) / 2 - y1));
    display.print(text);

  } while (display.nextPage()); // Send page buffer & check if more pages
}

void drawEmpty(String toptext) {
  display.setRotation(1); //sets landscape rotation
  display.setFullWindow(); //sets full refresh mode
  display.firstPage();     //start paged drawing

  do {
    //Set background for the current page
    display.fillScreen(GxEPD_WHITE);

    //Draw empty bars (Bitmap)
    display.drawBitmap(2, 37, base, 245, 91, GxEPD_BLACK);
    
    //border to check boundaries
    // display.drawRect(0, 6, 250, 122, GxEPD_BLACK);

    //Draw measurement mode
    display.setFont(); //default 5x7 font
    display.setTextColor(GxEPD_BLACK);
    if(sensemode == 0){
      display.setCursor(181, 10);
      display.print("Single Fire");
    }
    else if(sensemode == 1){
      display.setCursor(187, 10);
      display.print("Continuous");
    }
    else{
      display.setCursor(205, 10);
      display.print("Burst ");
      display.print(sensemode);
    }
    
    //draw led mode
    if(ledmode == 0){
      display.setCursor(205, 23);
      display.print("No LEDs");
    }
    else if(ledmode == 1){
      display.setCursor(169, 23);
      display.print("Internal LEDs");
    }
    else if(ledmode == 2){
      display.setCursor(169, 23);
      display.print("External LEDs");
    }
    else if(ledmode == 3){
      display.setCursor(199, 23);
      display.print("All LEDs");
    }
    else{
      display.setCursor(175, 23);
      display.print("Invalid Mode");
    }

    //Draw Title text (Set font, color, cursor, print)
    display.setFont(&FreeMonoBold18pt7b);
    display.setTextColor(GxEPD_BLACK);
    display.setCursor(0, 27);
    display.print(toptext);

  } while (display.nextPage()); // Send page buffer & check if more pages
}

void drawMain(String toptext, uint8_t *finalreadings) {
  display.setRotation(1); //sets landscape rotation
  display.setFullWindow(); //sets full refresh mode
  display.firstPage();     //start paged drawing

  do {
    //Set background for the current page
    display.fillScreen(GxEPD_WHITE);

    display.drawBitmap(2, 37, base, 245, 91, GxEPD_BLACK);
    //Draw Filled bars (Rectangles)
    display.fillRect(3, 107, 9, -finalreadings[0], GxEPD_BLACK);
    display.fillRect(16, 107, 9, -finalreadings[1], GxEPD_BLACK);
    display.fillRect(30, 107, 9, -finalreadings[2], GxEPD_BLACK);
    display.fillRect(44, 107, 9, -finalreadings[3], GxEPD_BLACK);
    display.fillRect(58, 107, 9, -finalreadings[4], GxEPD_BLACK);
    display.fillRect(72, 107, 9, -finalreadings[5], GxEPD_BLACK);
    display.fillRect(85, 107, 9, -finalreadings[6], GxEPD_BLACK);
    display.fillRect(99, 107, 9, -finalreadings[7], GxEPD_BLACK);
    display.fillRect(113, 107, 9, -finalreadings[8], GxEPD_BLACK);
    display.fillRect(127, 107, 9, -finalreadings[9], GxEPD_BLACK);
    display.fillRect(140, 107, 10, -finalreadings[10], GxEPD_BLACK);
    display.fillRect(154, 107, 9, -finalreadings[11], GxEPD_BLACK);
    display.fillRect(168, 107, 9, -finalreadings[12], GxEPD_BLACK);
    display.fillRect(182, 107, 9, -finalreadings[13], GxEPD_BLACK);
    display.fillRect(195, 107, 9, -finalreadings[14], GxEPD_BLACK);
    display.fillRect(209, 107, 9, -finalreadings[15], GxEPD_BLACK);
    display.fillRect(223, 107, 9, -finalreadings[16], GxEPD_BLACK);
    display.fillRect(237, 107, 9, -finalreadings[17], GxEPD_BLACK);

    //Draw measurement mode
    display.setFont(); //default 5x7 font
    display.setTextColor(GxEPD_BLACK);
    if(sensemode == 0){
      display.setCursor(181, 10);
      display.print("Single Fire");
    }
    else if(sensemode == 1){
      display.setCursor(187, 10);
      display.print("Continuous");
    }
    else{
      display.setCursor(205, 10);
      display.print("Burst ");
      display.print(sensemode);
    }
    
    //draw led mode
    if(ledmode == 0){
      display.setCursor(205, 23);
      display.print("No LEDs");
    }
    else if(ledmode == 1){
      display.setCursor(169, 23);
      display.print("Internal LEDs");
    }
    else if(ledmode == 2){
      display.setCursor(169, 23);
      display.print("External LEDs");
    }
    else if(ledmode == 3){
      display.setCursor(199, 23);
      display.print("All LEDs");
    }
    else{
      display.setCursor(175, 23);
      display.print("Invalid Mode");
    }

    //Draw Title text (Set font, color, cursor, print)
    display.setFont(&FreeMonoBold18pt7b);
    display.setTextColor(GxEPD_BLACK);
    display.setCursor(0, 27);
    display.print(toptext);

  } while (display.nextPage()); // Send page buffer & check if more pages
}